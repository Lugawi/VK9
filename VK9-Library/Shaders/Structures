/*
Copyright(c) 2017 Christopher Joseph Dean Schaefer

This software is provided 'as-is', without any express or implied
warranty.In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions :

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software.If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/

struct Light
{
	uint       Type;            /* Type of light source */
	vec4       Diffuse;         /* Diffuse color of light */
	vec4       Specular;        /* Specular color of light */
	vec4       Ambient;         /* Ambient color of light */
	vec4       Position;        /* Position in world space */
	vec4       Direction;       /* Direction in world space */
	float      Range;           /* Cutoff range */
	float      Falloff;         /* Falloff */
	float      Attenuation0;    /* Constant attenuation */
	float      Attenuation1;    /* Linear attenuation */
	float      Attenuation2;    /* Quadratic attenuation */
	float      Theta;           /* Inner angle of spotlight cone */
	float      Phi;             /* Outer angle of spotlight cone */
};

struct Material
{
	vec4   Diffuse;        /* Diffuse color RGBA */
	vec4   Ambient;        /* Ambient color RGB */
	vec4   Specular;       /* Specular 'shininess' */
	vec4   Emissive;       /* Emissive color RGB */
	float  Power;          /* Sharpness if specular highlight */
};

struct ShaderConstantSlots
{
	uint IntegerConstants[64];
	uint BooleanConstants[16]; 
	float FloatConstants[1024];
};

struct TextureStage
{
	uint colorOperation; //1
	uint colorArgument1; //2
	uint colorArgument2; //3
	uint alphaOperation; //4	
	uint alphaArgument1; //5
	uint alphaArgument2; //6
	float bumpMapMatrix00; //7
	float bumpMapMatrix01; //8
	float bumpMapMatrix10; //9
	float bumpMapMatrix11; //10
	uint texureCoordinateIndex; //11
	uint filler12;
	uint filler13;
	uint filler14;
	uint filler15;
	uint filler16;
	uint filler17;
	uint filler18;
	uint filler19;
	uint filler20;
	uint filler21;
	float bumpMapScale; //22
	float bumpMapOffset; //23
	uint textureTransformationFlags; //24
	float filler25;
	uint colorArgument0; //26
	uint alphaArgument0; //27
	uint Result; //28
	uint filler29;
	uint filler30;
	uint filler31;
	uint Constant; //32
};

//mat4 textureTransformationMatrix;

struct RenderState
{
	//Render State
	uint zEnable;
	uint fillMode;
	uint shadeMode;
	uint zWriteEnable;
	uint alphaTestEnable;
	uint lastPixel;
	uint sourceBlend;
	uint destinationBlend;
	uint cullMode;
	uint zFunction;
	uint alphaReference;
	uint alphaFunction;
	uint ditherEnable;
	uint alphaBlendEnable;
	uint fogEnable;
	uint specularEnable;
	uint fogColor;
	uint fogTableMode;
	float fogStart;
	float fogEnd;
	float fogDensity;
	uint rangeFogEnable;
	uint stencilEnable;
	uint stencilFail;
	uint stencilZFail;
	uint stencilPass;
	uint stencilFunction;
	uint stencilReference;
	uint stencilMask;
	uint stencilWriteMask;
	uint textureFactor;
	uint wrap0;
	uint wrap1;
	uint wrap2;
	uint wrap3;
	uint wrap4;
	uint wrap5;
	uint wrap6;
	uint wrap7;
	uint clipping;
	uint lighting;
	uint ambient;
	uint fogVertexMode;
	uint colorVertex;
	uint localViewer;
	uint normalizeNormals;
	uint diffuseMaterialSource;
	uint specularMaterialSource;
	uint ambientMaterialSource;
	uint emissiveMaterialSource;
	uint vertexBlend;
	uint clipPlaneEnable;
	float pointSize;
	float pointSizeMinimum;
	uint pointSpriteEnable;
	uint pointScaleEnable;
	float pointScaleA;
	float pointScaleB;
	float pointScaleC;
	uint multisampleAntiAlias;
	uint multisampleMask;
	uint patchEdgeStyle;
	uint debugMonitorToken;
	float pointSizeMaximum;
	uint indexedVertexBlendEnable;
	uint colorWriteEnable;	
	float tweenFactor;
	uint blendOperation;
	uint positionDegree;
	uint normalDegree;
	uint scissorTestEnable;
	float slopeScaleDepthBias;
	uint antiAliasedLineEnable;
	float minimumTessellationLevel;
	float maximumTessellationLevel;
	float adaptivetessX;
	float adaptivetessY;
	float adaptivetessZ;
	float adaptivetessW;
	uint enableAdaptiveTessellation;
	uint twoSidedStencilMode;
	uint ccwStencilFail;
	uint ccwStencilZFail;
	uint ccwStencilPass;
	uint ccwStencilFunction;
	uint colorWriteEnable1;
	uint colorWriteEnable2;
	uint colorWriteEnable3;
	uint blendFactor;
	uint srgbWriteEnable;	
	float depthBias;
	uint wrap8;
	uint wrap9;
	uint wrap10;
	uint wrap11;
	uint wrap12;
	uint wrap13;
	uint wrap14;
	uint wrap15;
	uint separateAlphaBlendEnable;
	uint sourceBlendAlpha;
	uint destinationBlendAlpha;
	uint blendOperationAlpha;	
};

struct ShaderState
{	
	RenderState mRenderState;
	TextureStage mTextureStages[9];
	Light mLights[8];
	Material mMaterial;
};

layout(std140,binding = 0) uniform ShaderStateBlock0
{
	RenderState renderState;
};