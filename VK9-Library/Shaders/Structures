/*
Copyright(c) 2017 Christopher Joseph Dean Schaefer

This software is provided 'as-is', without any express or implied
warranty.In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions :

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software.If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/

struct Light
{
	vec4       Diffuse;         /* Diffuse color of light */
	vec4       Specular;        /* Specular color of light */
	vec4       Ambient;         /* Ambient color of light */
	vec4       Position;        /* Position in world space */
	vec4       Direction;       /* Direction in world space */
	uint       Type;            /* Type of light source */
	float      Range;           /* Cutoff range */
	float      Falloff;         /* Falloff */
	float      Attenuation0;    /* Constant attenuation */
	float      Attenuation1;    /* Linear attenuation */
	float      Attenuation2;    /* Quadratic attenuation */
	float      Theta;           /* Inner angle of spotlight cone */
	float      Phi;             /* Outer angle of spotlight cone */
	uint       IsEnabled;
	uint       filler1;
	uint       filler2;
	uint       filler3;	
};
 
struct Material
{
	vec4   Diffuse;        /* Diffuse color RGBA */
	vec4   Ambient;        /* Ambient color RGB */
	vec4   Specular;       /* Specular 'shininess' */
	vec4   Emissive;       /* Emissive color RGB */
	float  Power;          /* Sharpness if specular highlight */
};

struct ShaderConstantSlots
{
	uint IntegerConstants[64];
	uint BooleanConstants[16]; 
	float FloatConstants[1024];
};

struct TextureStage
{
	mat4 textureTransformationMatrix;
	uint Constant;
	uint Result;
	uint textureTransformationFlags;	
	uint texureCoordinateIndex;
	uint colorOperation;
	uint colorArgument0;
	uint colorArgument1;
	uint colorArgument2;
	uint alphaOperation;
	uint alphaArgument0;
	uint alphaArgument1;
	uint alphaArgument2;
	float bumpMapMatrix00;
	float bumpMapMatrix01;
	float bumpMapMatrix10;
	float bumpMapMatrix11;
	float bumpMapScale;
	float bumpMapOffset;
	float filler1;
	float filler2;
};

struct RenderState
{
	float fogStart;
	float fogEnd;
	float fogDensity;
	float pointSize;
	float pointSizeMinimum;
	float pointScaleA;
	float pointScaleB;
	float pointScaleC;
	float pointSizeMaximum;
	float tweenFactor;
	float slopeScaleDepthBias;
	float minimumTessellationLevel;
	float maximumTessellationLevel;
	float adaptivetessX;
	float adaptivetessY;
	float adaptivetessZ;
	float adaptivetessW;
	float depthBias;

	uint textureCount;

	//Render State
	uint zEnable;
	uint fillMode;
	uint shadeMode;
	uint zWriteEnable;
	uint alphaTestEnable;
	uint lastPixel;
	uint sourceBlend;
	uint destinationBlend;
	uint cullMode;
	uint zFunction;
	uint alphaReference;
	uint alphaFunction;
	uint ditherEnable;
	uint alphaBlendEnable;
	uint fogEnable;
	uint specularEnable;
	uint fogColor;
	uint fogTableMode;
	uint rangeFogEnable;
	uint stencilEnable;
	uint stencilFail;
	uint stencilZFail;
	uint stencilPass;
	uint stencilFunction;
	uint stencilReference;
	uint stencilMask;
	uint stencilWriteMask;
	uint textureFactor;
	uint wrap0;
	uint wrap1;
	uint wrap2;
	uint wrap3;
	uint wrap4;
	uint wrap5;
	uint wrap6;
	uint wrap7;
	uint clipping;
	uint lighting;
	uint ambient;
	uint fogVertexMode;
	uint colorVertex;
	uint localViewer;
	uint normalizeNormals;
	uint diffuseMaterialSource;
	uint specularMaterialSource;
	uint ambientMaterialSource;
	uint emissiveMaterialSource;
	uint vertexBlend;
	uint clipPlaneEnable;
	uint pointSpriteEnable;
	uint pointScaleEnable;
	uint multisampleAntiAlias;
	uint multisampleMask;
	uint patchEdgeStyle;
	uint debugMonitorToken;
	uint indexedVertexBlendEnable;
	uint colorWriteEnable;	
	uint blendOperation;
	uint positionDegree;
	uint normalDegree;
	uint scissorTestEnable;
	uint antiAliasedLineEnable;
	uint enableAdaptiveTessellation;
	uint twoSidedStencilMode;
	uint ccwStencilFail;
	uint ccwStencilZFail;
	uint ccwStencilPass;
	uint ccwStencilFunction;
	uint colorWriteEnable1;
	uint colorWriteEnable2;
	uint colorWriteEnable3;
	uint blendFactor;
	uint srgbWriteEnable;	
	uint wrap8;
	uint wrap9;
	uint wrap10;
	uint wrap11;
	uint wrap12;
	uint wrap13;
	uint wrap14;
	uint wrap15;
	uint separateAlphaBlendEnable;
	uint sourceBlendAlpha;
	uint destinationBlendAlpha;
	uint blendOperationAlpha;
	uint screenWidth;
	uint screenHeight;
	uint filler1;
	uint filler2;
};

struct ShaderState
{	
	RenderState mRenderState;
	TextureStage mTextureStages[9];
	Light mLights[8];
	Material mMaterial;
};

layout(std140,binding = 0) uniform ShaderStateBlock0
{
	RenderState renderState;
};