/*
Copyright(c) 2017 Christopher Joseph Dean Schaefer

This software is provided 'as-is', without any express or implied
warranty.In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions :

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software.If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/

struct Light
{
	vec4       Diffuse;         /* Diffuse color of light */
	vec4       Specular;        /* Specular color of light */
	vec4       Ambient;         /* Ambient color of light */
	vec4       Position;        /* Position in world space */
	vec4       Direction;       /* Direction in world space */
	int        Type;            /* Type of light source */
	float      Range;           /* Cutoff range */
	float      Falloff;         /* Falloff */
	float      Attenuation0;    /* Constant attenuation */
	float      Attenuation1;    /* Linear attenuation */
	float      Attenuation2;    /* Quadratic attenuation */
	float      Theta;           /* Inner angle of spotlight cone */
	float      Phi;             /* Outer angle of spotlight cone */
	bool       IsEnabled;
	int        filler1;
	int        filler2;
	int        filler3;	
};
 
struct Material
{
	vec4   Diffuse;        /* Diffuse color RGBA */
	vec4   Ambient;        /* Ambient color RGB */
	vec4   Specular;       /* Specular 'shininess' */
	vec4   Emissive;       /* Emissive color RGB */
	float  Power;          /* Sharpness if specular highlight */
};

struct ShaderConstantSlots
{
	uint IntegerConstants[64];
	uint BooleanConstants[16]; 
	float FloatConstants[1024];
};

struct TextureStage
{
	mat4 textureTransformationMatrix;
	int Constant;
	int Result;
	int textureTransformationFlags;	
	int texureCoordinateIndex;
	int colorOperation;
	int colorArgument0;
	int colorArgument1;
	int colorArgument2;
	int alphaOperation;
	int alphaArgument0;
	int alphaArgument1;
	int alphaArgument2;
	float bumpMapMatrix00;
	float bumpMapMatrix01;
	float bumpMapMatrix10;
	float bumpMapMatrix11;
	float bumpMapScale;
	float bumpMapOffset;
	int filler1;
	int filler2;
};

struct RenderState
{
	int textureCount;

	//Render State
	int zEnable;
	int fillMode;
	int shadeMode;
	int zWriteEnable;
	int alphaTestEnable;
	int lastPixel;
	int sourceBlend;
	int destinationBlend;
	int cullMode;
	int zFunction;
	int alphaReference;
	int alphaFunction;
	int ditherEnable;
	int alphaBlendEnable;
	int fogEnable;
	int specularEnable;
	uint fogColor;
	int fogTableMode;
	float fogStart;
	float fogEnd;
	float fogDensity;
	int rangeFogEnable;
	int stencilEnable;
	int stencilFail;
	int stencilZFail;
	int stencilPass;
	int stencilFunction;
	int stencilReference;
	uint stencilMask;
	uint stencilWriteMask;
	uint textureFactor;
	int wrap0;
	int wrap1;
	int wrap2;
	int wrap3;
	int wrap4;
	int wrap5;
	int wrap6;
	int wrap7;
	int clipping;
	int lighting;
	uint ambient;
	int fogVertexMode;
	int colorVertex;
	int localViewer;
	int normalizeNormals;
	int diffuseMaterialSource;
	int specularMaterialSource;
	int ambientMaterialSource;
	int emissiveMaterialSource;
	int vertexBlend;
	int clipPlaneEnable;
	float pointSize;
	float pointSizeMinimum;
	int pointSpriteEnable;
	int pointScaleEnable;
	float pointScaleA;
	float pointScaleB;
	float pointScaleC;
	int multisampleAntiAlias;
	uint multisampleMask;
	int patchEdgeStyle;
	int debugMonitorToken;
	float pointSizeMaximum;
	int indexedVertexBlendEnable;
	int colorWriteEnable;
	float tweenFactor;
	int blendOperation;
	int positionDegree;
	int normalDegree;
	int scissorTestEnable;
	float slopeScaleDepthBias;
	int antiAliasedLineEnable;
	float minimumTessellationLevel;
	float maximumTessellationLevel;
	float adaptivetessX;
	float adaptivetessY;
	float adaptivetessZ;
	float adaptivetessW;
	int enableAdaptiveTessellation;
	int twoSidedStencilMode;
	int ccwStencilFail;
	int ccwStencilZFail;
	int ccwStencilPass;
	int ccwStencilFunction;
	int colorWriteEnable1;
	int colorWriteEnable2;
	int colorWriteEnable3;
	uint blendFactor;
	int srgbWriteEnable;
	float depthBias;
	int wrap8;
	int wrap9;
	int wrap10;
	int wrap11;
	int wrap12;
	int wrap13;
	int wrap14;
	int wrap15;
	int separateAlphaBlendEnable;
	int sourceBlendAlpha;
	int destinationBlendAlpha;
	int blendOperationAlpha;
	int screenWidth;
	int screenHeight;
	int filler1;
	int filler2;
};

struct ShaderState
{
	Light mLights[8];
	RenderState mRenderState;
	TextureStage mTextureStages[9];
	Material mMaterial;
};