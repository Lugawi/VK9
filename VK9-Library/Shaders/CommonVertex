/*
Copyright(c) 2019 Christopher Joseph Dean Schaefer

This software is provided 'as-is', without any express or implied
warranty.In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions :

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software.If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/

struct Light
{
	uint       Type;            /* Type of light source */
	float      Range;           /* Cutoff range */
	float      Falloff;         /* Falloff */
	float      Attenuation0;    /* Constant attenuation */
	float      Attenuation1;    /* Linear attenuation */
	float      Attenuation2;    /* Quadratic attenuation */
	float      Theta;           /* Inner angle of spotlight cone */
	float      Phi;             /* Outer angle of spotlight cone */
	vec4       Diffuse;         /* Diffuse color of light */
	vec4       Specular;        /* Specular color of light */
	vec4       Ambient;         /* Ambient color of light */
	vec4       Position;        /* Position in world space */
	vec4       Direction;       /* Direction in world space */

};

struct Material
{
	vec4   Diffuse;        /* Diffuse color RGBA */
	vec4   Ambient;        /* Ambient color RGB */
	vec4   Specular;       /* Specular 'shininess' */
	vec4   Emissive;       /* Emissive color RGB */
	float  Power;          /* Sharpness if specular highlight */
};

struct ColorPair
{
	vec4   Ambient;
	vec4   Diffuse;
	vec4   Specular;
	vec4   GlobalIllumination;
};

layout(std430,binding = 1) uniform LightBlock
{
	Light lights[8];
};

layout(std430,binding = 2) uniform LightEnableBlock
{
	int lightEnables[8];
};

layout(std430,binding = 3) uniform MaterialBlock
{
	Material material;
};

/*
https://msdn.microsoft.com/en-us/library/windows/desktop/bb172256(v=vs.85).aspx
*/
vec4 GetGlobalIllumination(vec4 inNormal, vec4 inPosition)
{
	vec4 ambient = vec4(0);
	vec4 diffuse = vec4(0);
	vec4 specular = vec4(0);
	vec4 emissive = vec4(0);	
	vec4 ambientTemp = vec4(0);
	vec4 diffuseTemp = vec4(0);
	vec4 specularTemp = vec4(0);
	vec3 cameraPosition = vec3(0);

	float lightDistance = 0;
	vec4 norm = vec4(0);
	vec4 vectorPosition = vec4(0);
	vec4 lightPosition = vec4(0);
	vec4 lightDirection = vec4(0);
	float attenuation = 0;
	vec4 ldir = vec4(0);
	float rho = 0;
	float spot = 0;

	norm = transformations[D3DTS_WORLD] * vec4(inNormal.xyz,0);
	norm *= vec4(1.0,-1.0,1.0,1.0);
	if(renderState.normalizeNormals==1)
	{
		norm = normalize(norm);
	}

	vectorPosition = transformations[D3DTS_WORLD] * vec4(inPosition.xyz,1);
	vectorPosition *= vec4(1.0,-1.0,1.0,1.0);

	//https://msdn.microsoft.com/en-us/library/windows/desktop/bb172279(v=vs.85).aspx
	for( int i=0; i<8; ++i )
	{		
		if(lightEnables[i]==1)
		{		
			lightPosition = vec4(lights[i].Position.xyz,1); 
			lightPosition *= vec4(1.0,-1.0,1.0,1.0);

			lightDirection = vec4(lights[i].Direction.xyz,0);
			lightDirection *= vec4(1.0,-1.0,1.0,1.0);

			lightDistance = abs(distance(vectorPosition.xyz,lightPosition.xyz));

			if(lights[i].Type == D3DLIGHT_DIRECTIONAL)
			{
				ldir = normalize(lightDirection * vec4(-1.0,-1.0,-1.0,-1.0));
			}
			else
			{
				ldir = normalize(lightPosition - vectorPosition);
			}

			if(lights[i].Type == D3DLIGHT_DIRECTIONAL)
			{
				attenuation = 1;
			}
			else if(lights[i].Range < lightDistance)
			{
				attenuation = 0;
			}
			else
			{
				attenuation = 1/( lights[i].Attenuation0 + lights[i].Attenuation1 * lightDistance + lights[i].Attenuation2 * pow(lightDistance,2));	
			}

			rho = clamp(dot(normalize(lightDirection.xyz * vec3(-1.0,-1.0,-1.0)),normalize(lightPosition.xyz - vectorPosition.xyz)),0,1);

			if(lights[i].Type != D3DLIGHT_SPOT || rho > cos(lights[i].Theta/2))
			{
				spot = 1;
			}
			else if(rho <= cos(lights[i].Phi/2))
			{
				spot = 0;
			}
			else
			{
				float u = rho - cos(lights[i].Phi / 2);
				float v = cos(lights[i].Theta / 2) - cos(lights[i].Phi / 2);
				spot = pow(clamp(u / v,0,1),lights[i].Falloff);
			}

			ambientTemp += (attenuation * spot * lights[i].Ambient);
			diffuseTemp += (material.Diffuse * lights[i].Diffuse * clamp(dot(norm,ldir),0,1) * attenuation * spot);

			if(renderState.specularEnable==1)
			{
				vec3 halfway;
				if(renderState.localViewer==1)
				{
					halfway = normalize(normalize(cameraPosition - vectorPosition.xyz) + ldir.xyz);			
				}
				else
				{
					halfway = normalize(vec3(0,0,1) + ldir.xyz);
				}
				
				//The result is defined if x < 0 or x=0 and y<=0
				// The clamp will take care of the former and the if will take care of the latter. if the result is zero then this whole line is zero therefore just skip it.
				if(material.Power > 0)
				{
					specularTemp += (lights[i].Specular * pow(clamp(dot(norm.xyz,halfway),0,1),material.Power) * attenuation * spot);
				}
			}
		}
	}

	ambient = material.Ambient * (Convert(renderState.ambient) + ambientTemp);
	diffuse = diffuseTemp;
	emissive = material.Emissive;

	if(renderState.specularEnable==1)
	{
		specular = material.Specular * specularTemp;
	}

	vec4 lightColor = (ambient + diffuse + specular + emissive);
	lightColor.a = 1.0;
	return lightColor;
}

ColorPair CalculateDirectionalLight(vec3 N, vec3 V, int i)
{
   ColorPair returnValue;
   vec3 L = mat3(inverse(transformations[D3DTS_VIEW])) * vec3(-normalize(lights[i].Direction));
   //L *= vec3(1.0,-1.0,1.0);

   float NdotL = dot(N, L);
   returnValue.Diffuse = vec4(0);
   returnValue.Specular = vec4(0);
   returnValue.Ambient = lights[i].Ambient;

   if(NdotL > 0.0f)
   {
      returnValue.Diffuse += NdotL * lights[i].Diffuse;

      if(renderState.specularEnable==1)
      {
         vec3 H = normalize(L + V);   //half vector
         returnValue.Specular = pow(max(0, dot(H, N)), material.Power) * lights[i].Specular;
      }
   }
   return returnValue;
}

ColorPair CalculatePointLight(vec4 vPosition, vec3 N, vec3 V, int i)
{
   ColorPair returnValue;
   vec3 L = mat3(inverse(transformations[D3DTS_VIEW])) * normalize(vec3(lights[i].Position-(transformations[D3DTS_WORLD] * vPosition)));
   //L *= vec3(1.0,-1.0,1.0);
 
   float NdotL = dot(N, L);
   returnValue.Diffuse = vec4(0);
   returnValue.Specular = vec4(0);
   returnValue.Ambient = lights[i].Ambient;

   float fAtten = 1.f;
   if(NdotL >= 0.f)
   {
      returnValue.Diffuse += NdotL * lights[i].Diffuse;

      if(renderState.specularEnable==1)
      {
         vec3 H = normalize(L + V);   //half vector
         returnValue.Specular = pow(max(0, dot(H, N)), material.Power) * lights[i].Specular;
      }

      float LD = length(vec3(lights[i].Position)-vec3(transformations[D3DTS_WORLD] * vPosition));
      if(LD > lights[i].Range)
      {
         fAtten = 0.f;
      }
      else
      {
         fAtten *= 1.f/(lights[i].Attenuation0 + lights[i].Attenuation1*LD + lights[i].Attenuation2*LD*LD);
      }

	  returnValue.Ambient *= fAtten;
      returnValue.Diffuse *= fAtten;
      returnValue.Specular *= fAtten;
   }
   return returnValue;
}

ColorPair CalculateSpotLight(vec4 vPosition, vec3 N, vec3 V, int i)
{
   ColorPair returnValue;
   vec3 L = mat3(inverse(transformations[D3DTS_VIEW])) * normalize(vec3(lights[i].Position-(transformations[D3DTS_WORLD] * vPosition)));
   //L *= vec3(1.0,-1.0,1.0);

   float NdotL = dot(N, L);
   returnValue.Diffuse = vec4(0);
   returnValue.Specular = vec4(0);
   returnValue.Ambient = lights[i].Ambient;

   float fAttenSpot = 1.f;
   if(NdotL >= 0.f)
   {
      returnValue.Diffuse += NdotL * lights[i].Diffuse;

      if(renderState.specularEnable==1)
      {
         vec3 H = normalize(L + V);   //half vector
         returnValue.Specular = pow(max(0, dot(H, N)), material.Power) * lights[i].Specular;
      }

      float LD = length(vec3(lights[i].Position)-vec3(transformations[D3DTS_WORLD] * vPosition));
      if(LD > lights[i].Range)
      {
         fAttenSpot = 0.f;
      }
      else
      {
         fAttenSpot *= 1.f/(lights[i].Attenuation0 + lights[i].Attenuation1*LD + lights[i].Attenuation2*LD*LD);
      }

      vec3 L2 = mat3(inverse(transformations[D3DTS_VIEW])) * vec3(-normalize(lights[i].Direction));
	  //L2 *= vec3(1.0,-1.0,1.0);

      float rho = dot(L, L2);
	  vec3 vSpot = vec3(cos(lights[i].Theta/2),cos(lights[i].Phi/2),cos(lights[i].Falloff));
      fAttenSpot *= pow(clamp((rho - vSpot.y)/(vSpot.x - vSpot.y),0.0,1.0), vSpot.z);

	  returnValue.Ambient *= fAttenSpot;
      returnValue.Diffuse *= fAttenSpot;
      returnValue.Specular *= fAttenSpot;
   }
   return returnValue;
}

ColorPair CalculateGlobalIllumination(vec4 inPosition1, vec4 inNormal1, vec4 inColor1, vec4 inColor2)
{
	vec4 diffuse;
	vec4 ambient;
	vec4 specular;
	vec4 emissive;

	if(renderState.colorVertex==1)
	{
		switch(renderState.diffuseMaterialSource)
		{
			case D3DMCS_MATERIAL:
				diffuse = material.Diffuse;
			break;
			case D3DMCS_COLOR1:
				diffuse = inColor1;
			break;
			case D3DMCS_COLOR2:
				diffuse = inColor2;
			break;
			default:
				diffuse = vec4(1.0);
			break;
		}
		
		switch(renderState.ambientMaterialSource)
		{
			case D3DMCS_MATERIAL:
				ambient = material.Ambient;
			break;
			case D3DMCS_COLOR1:
				ambient = inColor1;
			break;
			case D3DMCS_COLOR2:
				ambient = inColor2;
			break;
			default:
				ambient = vec4(0.0);
			break;
		}

		switch(renderState.specularMaterialSource)
		{
			case D3DMCS_MATERIAL:
				specular = material.Specular;
			break;
			case D3DMCS_COLOR1:
				specular = inColor1;
			break;
			case D3DMCS_COLOR2:
				specular = inColor2;
			break;
			default:
				specular = vec4(0.0);
			break;
		}

		switch(renderState.emissiveMaterialSource)
		{
			case D3DMCS_MATERIAL:
				emissive = material.Emissive;
			break;
			case D3DMCS_COLOR1:
				emissive = inColor1;
			break;
			case D3DMCS_COLOR2:
				emissive = inColor2;
			break;
			default:
				emissive = vec4(0.0);
			break;
		}		
	}
	else
	{
		diffuse = material.Diffuse;
		ambient = material.Ambient;
		specular = material.Specular;
		emissive = material.Emissive;
	}

	ColorPair returnValue;

	if(renderState.lighting==1)
	{
		/*
		returnValue.Ambient = vec4(0.0);
		returnValue.Diffuse = vec4(0.0);
		returnValue.Specular = vec4(0.0);

		vec4 calculatePosition;
		vec3 calculateNormal;

		calculatePosition = inPosition1;

		if(renderState.normalizeNormals==1)
		{
			calculateNormal = vec3(inNormal1);
		}
		else
		{
			calculateNormal = vec3(normalize(inNormal1));
		}

		vec3 P = vec3(transformations[D3DTS_MV] * calculatePosition);
		//P *= vec3(1.0,-1.0,1.0);

		vec3 N = mat3(inverse(transformations[D3DTS_MV])) * calculateNormal;
		//N *= vec3(1.0,-1.0,1.0);

		vec3 V = -normalize(P);                          

		for( int i=0; i<8; ++i )
		{
			if(lights[i].IsEnabled==1)
			{
				ColorPair lightResult;

				switch(lights[i].Type)
				{
					case D3DLIGHT_POINT:
						lightResult = CalculatePointLight(calculatePosition, N, V, i);
					break;
					case D3DLIGHT_SPOT:
						lightResult = CalculateSpotLight(calculatePosition, N, V, i);
					break;
					case D3DLIGHT_DIRECTIONAL:
						lightResult = CalculateDirectionalLight(N, V, i);
					break;
				}
				returnValue.Ambient += lightResult.Ambient;
				returnValue.Diffuse += lightResult.Diffuse;
				returnValue.Specular += lightResult.Specular;
			}
		}

		returnValue.Ambient.a = 1.0;
		returnValue.Diffuse.a = 1.0;
		returnValue.Specular.a = 1.0;	

		returnValue.GlobalIllumination = (ambient * (Convert(renderState.ambient) + returnValue.Ambient) ) + (diffuse * returnValue.Diffuse) + (specular * returnValue.Specular) + emissive;
		*/

		returnValue.GlobalIllumination = GetGlobalIllumination(inNormal1,inPosition1);
	}
	else
	{
		returnValue.GlobalIllumination = vec4(1.0);
	}

	returnValue.Diffuse = diffuse;
	returnValue.Specular = specular;	

	return returnValue;
}

ColorPair CalculateGlobalIllumination(vec4 inPosition1, vec4 inPosition2, vec4 inNormal1, vec4 inNormal2, vec4 inColor1, vec4 inColor2)
{
	vec4 calculatePosition;
	vec3 calculateNormal;

	calculatePosition =  (1.f-renderState.tweenFactor) * inPosition1 + renderState.tweenFactor * inPosition2;

	if(renderState.normalizeNormals==1)
	{
		calculateNormal   = vec3( (1.f-renderState.tweenFactor) * normalize(inNormal1) + renderState.tweenFactor * normalize(inNormal2) );
	}
	else
	{
		calculateNormal   = vec3( (1.f-renderState.tweenFactor) * inNormal1 + renderState.tweenFactor * inNormal2 );
	}
	
	return CalculateGlobalIllumination(calculatePosition, vec4(calculateNormal,1), inColor1, inColor2);
}