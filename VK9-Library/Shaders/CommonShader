/*
Copyright(c) 2019 Christopher Joseph Dean Schaefer

This software is provided 'as-is', without any express or implied
warranty.In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions :

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software.If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/

#define D3DSHADE_FLAT 1
#define D3DSHADE_GOURAUD 2
#define D3DSHADE_PHONG 3

#define D3DLIGHT_POINT 1
#define D3DLIGHT_SPOT 2
#define D3DLIGHT_DIRECTIONAL 3

#define D3DTOP_DISABLE 1
#define D3DTOP_SELECTARG1 2
#define D3DTOP_SELECTARG2 3
#define D3DTOP_MODULATE 4
#define D3DTOP_MODULATE2X 5
#define D3DTOP_MODULATE4X 6
#define D3DTOP_ADD 7
#define D3DTOP_ADDSIGNED 8
#define D3DTOP_ADDSIGNED2X 9
#define D3DTOP_SUBTRACT 10
#define D3DTOP_ADDSMOOTH 11
#define D3DTOP_BLENDDIFFUSEALPHA 12
#define D3DTOP_BLENDTEXTUREALPHA 13
#define D3DTOP_BLENDFACTORALPHA 14
#define D3DTOP_BLENDTEXTUREALPHAPM 15
#define D3DTOP_BLENDCURRENTALPHA 16
#define D3DTOP_PREMODULATE 17
#define D3DTOP_MODULATEALPHA_ADDCOLOR 18
#define D3DTOP_MODULATECOLOR_ADDALPHA 19
#define D3DTOP_MODULATEINVALPHA_ADDCOLOR 20
#define D3DTOP_MODULATEINVCOLOR_ADDALPHA 21
#define D3DTOP_BUMPENVMAP 22
#define D3DTOP_BUMPENVMAPLUMINANCE 23
#define D3DTOP_DOTPRODUCT3 24
#define D3DTOP_MULTIPLYADD 25
#define D3DTOP_LERP 26

#define D3DTA_SELECTMASK        0x0000000f  // mask for arg selector
#define D3DTA_DIFFUSE           0x00000000  // select diffuse color (read only)
#define D3DTA_CURRENT           0x00000001  // select stage destination register (read/write)
#define D3DTA_TEXTURE           0x00000002  // select texture color (read only)
#define D3DTA_TFACTOR           0x00000003  // select D3DRS_TEXTUREFACTOR (read only)
#define D3DTA_SPECULAR          0x00000004  // select specular color (read only)
#define D3DTA_TEMP              0x00000005  // select temporary register color (read/write)
#define D3DTA_CONSTANT          0x00000006  // select texture stage constant
#define D3DTA_COMPLEMENT        0x00000010  // take 1.0 - x (read modifier)
#define D3DTA_ALPHAREPLICATE    0x00000020  // replicate alpha to color components (read modifier)

#define D3DTTFF_DISABLE 0     // texture coordinates are passed directly
#define D3DTTFF_COUNT1 1      // rasterizer should expect 1-D texture coords
#define D3DTTFF_COUNT2 2      // rasterizer should expect 2-D texture coords
#define D3DTTFF_COUNT3 3      // rasterizer should expect 3-D texture coords
#define D3DTTFF_COUNT4 4      // rasterizer should expect 4-D texture coords
#define D3DTTFF_PROJECTED 256 // texcoords to be divided by COUNTth element

#define D3DTSS_TCI_PASSTHRU                             0x00000000
#define D3DTSS_TCI_CAMERASPACENORMAL                    0x00010000
#define D3DTSS_TCI_CAMERASPACEPOSITION                  0x00020000
#define D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR          0x00030000
#define D3DTSS_TCI_SPHEREMAP                            0x00040000

#define D3DZB_FALSE 0
#define D3DZB_TRUE 1 // Z buffering
#define D3DZB_USEW 2 // W buffering

#define D3DFILL_POINT 1
#define D3DFILL_WIREFRAME 2
#define D3DFILL_SOLID 3

#define D3DBLEND_ZERO 1
#define D3DBLEND_ONE 2
#define D3DBLEND_SRCCOLOR 3
#define D3DBLEND_INVSRCCOLOR 4
#define D3DBLEND_SRCALPHA 5
#define D3DBLEND_INVSRCALPHA 6
#define D3DBLEND_DESTALPHA 7
#define D3DBLEND_INVDESTALPHA 8
#define D3DBLEND_DESTCOLOR 9
#define D3DBLEND_INVDESTCOLOR 10
#define D3DBLEND_SRCALPHASAT 11
#define D3DBLEND_BOTHSRCALPHA 12
#define D3DBLEND_BOTHINVSRCALPHA 13
#define D3DBLEND_BLENDFACTOR 14
#define D3DBLEND_INVBLENDFACTOR 15
#define D3DBLEND_SRCCOLOR2 16
#define D3DBLEND_INVSRCCOLOR2 17

#define D3DCULL_NONE 1
#define D3DCULL_CW 2
#define D3DCULL_CCW 3

#define D3DCMP_NEVER 1
#define D3DCMP_LESS 2
#define D3DCMP_EQUAL 3
#define D3DCMP_LESSEQUAL 4
#define D3DCMP_GREATER 5
#define D3DCMP_NOTEQUAL 6
#define D3DCMP_GREATEREQUAL 7
#define D3DCMP_ALWAYS 8

#define D3DCMP_NEVER 1
#define D3DCMP_LESS 2
#define D3DCMP_EQUAL 3
#define D3DCMP_LESSEQUAL 4
#define D3DCMP_GREATER 5
#define D3DCMP_NOTEQUAL 6
#define D3DCMP_GREATEREQUAL 7
#define D3DCMP_ALWAYS 8

#define D3DFOG_NONE 0
#define D3DFOG_EXP 1
#define D3DFOG_EXP2 2
#define D3DFOG_LINEAR 3

#define D3DSTENCILOP_KEEP 1
#define D3DSTENCILOP_ZERO 2
#define D3DSTENCILOP_REPLACE 3
#define D3DSTENCILOP_INCRSAT 4
#define D3DSTENCILOP_DECRSAT 5
#define D3DSTENCILOP_INVERT 6
#define D3DSTENCILOP_INCR 7
#define D3DSTENCILOP_DECR 8

#define D3DMCS_MATERIAL 0
#define D3DMCS_COLOR1 1
#define D3DMCS_COLOR2 2

#define D3DVBF_DISABLE 0
#define D3DVBF_1WEIGHTS 1
#define D3DVBF_2WEIGHTS 2
#define D3DVBF_3WEIGHTS 3
#define D3DVBF_TWEENING 255
#define D3DVBF_0WEIGHTS 256

#define D3DPATCHEDGE_DISCRETE 0
#define D3DPATCHEDGE_CONTINUOUS 1

#define D3DDMT_ENABLE 0
#define D3DDMT_DISABLE 1

#define D3DBLENDOP_ADD 1
#define D3DBLENDOP_SUBTRACT 2
#define D3DBLENDOP_REVSUBTRACT 3
#define D3DBLENDOP_MIN 4
#define D3DBLENDOP_MAX 5

#define D3DDEGREE_LINEAR 1
#define D3DDEGREE_QUADRATIC 2
#define D3DDEGREE_CUBIC 3
#define D3DDEGREE_QUINTIC 5

#define PI 3.14

#define D3DTS_VIEW 2
#define D3DTS_PROJECTION 3
#define D3DTS_TEXTURE0 16
#define D3DTS_TEXTURE1 17
#define D3DTS_TEXTURE2 18
#define D3DTS_TEXTURE3 19
#define D3DTS_TEXTURE4 20
#define D3DTS_TEXTURE5 21
#define D3DTS_TEXTURE6 22
#define D3DTS_TEXTURE7 23

#define D3DTS_WORLD	256

#define D3DTS_MVP 0
#define D3DTS_MV 1

struct RenderState
{
	//Render State
	uint filler0;
	uint filler1;
	uint filler2;
	uint filler3;
	uint filler4;
	uint filler5;
	uint filler6;
	uint zEnable; //7
	uint fillMode; //8
	uint shadeMode; //9
	uint filler10;
	uint filler11;
	uint filler12;
	uint filler13;
	uint zWriteEnable; //14
	uint alphaTestEnable; //15
	uint lastPixel; //16
	uint filler17;
	uint filler18;
	uint sourceBlend; //19
	uint destinationBlend; //20
	uint filler21;
	uint cullMode; //22
	uint zFunction; //23
	uint alphaReference; //24
	uint alphaFunction; //25
	uint ditherEnable; //26
	uint alphaBlendEnable; //27
	uint fogEnable; //28
	uint specularEnable; //29
	uint filler30;
	uint filler31;
	uint filler32;
	uint filler33;
	uint fogColor; //34
	uint fogTableMode; //35
	float fogStart; //36
	float fogEnd; //37
	float fogDensity; //38
	uint filler39;
	uint filler40;
	uint filler41;
	uint filler42;
	uint filler43;
	uint filler44;
	uint filler45;
	uint filler46;
	uint filler47;
	uint rangeFogEnable; //48
	uint filler49;
	uint filler50;
	uint filler51;
	uint stencilEnable; //52
	uint stencilFail; //53
	uint stencilZFail; //54
	uint stencilPass; //55
	uint stencilFunction; //56
	uint stencilReference; //57
	uint stencilMask; //58
	uint stencilWriteMask; //59
	uint textureFactor; //60
	uint filler61;
	uint filler62;
	uint filler63;
	uint filler64;
	uint filler65;
	uint filler66;
	uint filler67;
	uint filler68;
	uint filler69;
	uint filler70;
	uint filler71;
	uint filler72;
	uint filler73;
	uint filler74;
	uint filler75;
	uint filler76;
	uint filler77;
	uint filler78;
	uint filler79;
	uint filler80;
	uint filler81;
	uint filler82;
	uint filler83;
	uint filler84;
	uint filler85;
	uint filler86;
	uint filler87;
	uint filler88;
	uint filler89;
	uint filler90;
	uint filler91;
	uint filler92;
	uint filler93;
	uint filler94;
	uint filler95;
	uint filler96;
	uint filler97;
	uint filler98;
	uint filler99;
	uint filler100;
	uint filler101;
	uint filler102;
	uint filler103;
	uint filler104;
	uint filler105;
	uint filler106;
	uint filler107;
	uint filler108;
	uint filler109;
	uint filler110;
	uint filler111;
	uint filler112;
	uint filler113;
	uint filler114;
	uint filler115;
	uint filler116;
	uint filler117;
	uint filler118;
	uint filler119;
	uint filler120;
	uint filler121;
	uint filler122;
	uint filler123;
	uint filler124;
	uint filler125;
	uint filler126;
	uint filler127;
	uint wrap0; //128
	uint wrap1; //129
	uint wrap2; //130
	uint wrap3; //131
	uint wrap4; //132
	uint wrap5; //133
	uint wrap6; //134
	uint wrap7; //135
	uint clipping; //136
	uint lighting; //137
	uint filler138;
	uint ambient; //139
	uint fogVertexMode; //140
	uint colorVertex; //141
	uint localViewer; //142
	uint normalizeNormals; //143
	uint filler144;
	uint diffuseMaterialSource; //145
	uint specularMaterialSource; //146
	uint ambientMaterialSource; //147
	uint emissiveMaterialSource; //148
	uint filler149;
	uint filler150;
	uint vertexBlend; //151
	uint clipPlaneEnable; //152
	uint filler153;
	float pointSize; //154
	float pointSizeMinimum; //155
	uint pointSpriteEnable; //156
	uint pointScaleEnable; //157
	float pointScaleA; //158
	float pointScaleB; //159
	float pointScaleC; //160
	uint multisampleAntiAlias; //161
	uint multisampleMask; //162
	uint patchEdgeStyle; //163
	uint filler164;
	uint debugMonitorToken; //165
	float pointSizeMaximum; //166
	uint indexedVertexBlendEnable; //167
	uint colorWriteEnable; //168
	uint filler169;
	float tweenFactor; //170
	uint blendOperation; //171
	uint positionDegree; //172
	uint normalDegree; //173
	uint scissorTestEnable; //174
	float slopeScaleDepthBias; //175
	uint antiAliasedLineEnable; //176
	uint filler177;
	float minimumTessellationLevel; //178
	float maximumTessellationLevel; //179
	float adaptivetessX; //180
	float adaptivetessY; //181
	float adaptivetessZ; //182
	float adaptivetessW; //183
	uint enableAdaptiveTessellation; //184
	uint twoSidedStencilMode; //185
	uint ccwStencilFail; //186
	uint ccwStencilZFail; //187
	uint ccwStencilPass; //188
	uint ccwStencilFunction; //189
	uint colorWriteEnable1; //190
	uint colorWriteEnable2; //191
	uint colorWriteEnable3; //192
	uint blendFactor; //193
	uint srgbWriteEnable; //194
	float depthBias; //195
	uint filler196;
	uint filler197;
	uint wrap8; //198
	uint wrap9; //199
	uint wrap10; //200
	uint wrap11; //201
	uint wrap12; //202
	uint wrap13; //203
	uint wrap14; //204
	uint wrap15; //205
	uint separateAlphaBlendEnable; //206
	uint sourceBlendAlpha; //207
	uint destinationBlendAlpha; //208
	uint blendOperationAlpha; //209

	uint screenWidth;
	uint screenHeight;
	uint textureCount;
};

struct ShaderConstantSlots
{
	uint IntegerConstants[64];
	uint BooleanConstants[16]; 
	float FloatConstants[1024];
};

layout(std430,binding = 0) uniform RenderStateBlock
{
	RenderState renderState;
};

layout(row_major,std430,binding = 4) uniform TransformationBlock
{
	mat4 transformations[512];
};

vec4 Convert(uvec4 rgba)
{
	vec4 unpacked;

	unpacked.w = float(rgba.w);
	unpacked.z = float(rgba.z);
	unpacked.y = float(rgba.y);
	unpacked.x = float(rgba.x);

	unpacked.x = unpacked.x / 255;
	unpacked.y = unpacked.y / 255;
	unpacked.z = unpacked.z / 255;
	unpacked.w = unpacked.w / 255;	

	return unpacked;
}

vec4 Convert(uint rgba)
{
	vec4 unpacked = vec4(0);

	unpacked.a = float((rgba & uint(0xff000000)) >> 24);
	unpacked.b = float((rgba & uint(0x00ff0000)) >> 16);
	unpacked.g = float((rgba & uint(0x0000ff00)) >> 8);
	unpacked.r = float((rgba & uint(0x000000ff)) >> 0);

	unpacked.r = unpacked.r / 255;
	unpacked.g = unpacked.g / 255;
	unpacked.b = unpacked.b / 255;
	unpacked.a = unpacked.a / 255;	
	
	return unpacked;
}